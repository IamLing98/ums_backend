#config de deploy
#Port
server.port=${port:8080}
#Hibernate
spring.jpa.properties.hibernate.dialect=${SPRING_JPA_HIBERNATE_DIALECT:}
#
spring.jpa.properties.hibernate.id.new_generator_mappings=true
#
spring.jpa.show-sql=true
#
spring.jpa.properties.hibernate.format_sql=true
#
spring.jpa.generate-ddl=true
#
spring.jpa.properties.hibernate.hb2dll.auto=update
#
logging.level.org.hibernate.SQL=DEBUG
#
logging.level.org.hibernate.type.descriptor.sql.BasicBinder=TRACE
#
spring.datasource.url=${JDBC_DATABASE_URL:}
#
spring.datasource.username=${JDBC_DATABASE_USERNAME:}
#
spring.datasource.password=${JDBC_DATABASE_PASSWORD:}
#
spring.datasource.driver-class-name=${JDBC_DATABASE_DRIVER:}

spring.autoconfigure.exclude=org.springframework.boot.autoconfigure.jdbc.DataSourceAutoConfiguration

spring.jpa.properties.hibernate.show.sql=true

spring.profiles.active=dev

#jwt.secret
jwt.secret=javainuse
# Keep the connection alive if idle for a long time (needed in production)
spring.datasource.dbcp.test-while-idle=true
spring.datasource.dbcp.validation-query=SELECT 1
# Hibernate ddl auto (create, create-drop, update): with "update" the database
# schema will be automatically updated accordingly to java entities found in
# the project
spring.jpa.hibernate.ddl-auto=update
#
## Naming strategy
spring.jpa.hibernate.naming.strategy=org.hibernate.cfg.ImprovedNamingStrategy
#
## Allows Hibernate to generate SQL optimized for a particular DBMS
## MULTIPART (MultipartProperties)
# Enable multipart uploads
spring.servlet.multipart.enabled=true
# Threshold after which files are written to disk.
spring.servlet.multipart.file-size-threshold=2KB
# Max file size.
spring.servlet.multipart.max-file-size=200MB
# Max Request Size
spring.servlet.multipart.max-request-size=215MB
#included in response when throwing ...
server.error.include-message=always
## File Storage Properties
# All files uploaded through the REST API will be stored in this directory
file.upload-dir=/linkdoan/uploads
spring.data.ldap.repositories.enabled=false